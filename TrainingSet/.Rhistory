total.df$rating[1388345]
total.df$rating[1388344]
total.df$reviewer[1388344]
for(j in 1388345:length(total.df$full_html)){
total.df$rating[j] <- unlist(strsplit(total.df$full_html[j], "<span class=\" staticStars\" title=\""))[2]
total.df$rating[j] <- unlist(strsplit(total.df$rating[j], "\""))[1]
print(j/length(total.df$full_html))
}
setwd("~/Desktop/Goodreads_FantasyFULL")
remove(j)
remove(review.rating)
save.image("ProvisionalCorpus.RData")
load("/home/rsimone/Dropbox/Goodreads Project/Corpora/Wattpad_corpus_classicsSTATS.RData")
View(wattpad_header_df)
load("/home/rsimone/Dropbox/Goodreads Project/Corpora/Wattpad_classics_stats_ 21books.RData")
load("/home/rsimone/Dropbox/Goodreads Project/Corpora/Wattpad_classics_stats_ 21books.RData")
View(total.df)
library(data.table)   # Required for rbindlist
library(dplyr)        # Required to use the pipes %>% and some table manipulation commands
library(magrittr)     # Required to use the pipes %>%
library(rvest)        # Required for read_html
library(RSelenium)    # Required for webscraping with javascript
library(stringi)      # For playing with url strings
library(textcat)      # For automatic language recognition (extract English reviews)
library(methods)	  # to avoid error with nohup
raw_html <- total.df$full_html
total.df$full_html <- NULL
clean_df <- unique(total.df)
cat("\nExcluding final line\n\n")
for(i in 1:length(clean_df$review)){
if (stri_sub(clean_df$review[i],-13)=="...more \n\n \n "){
clean_df$review[i] = unlist(strsplit(clean_df$review[i], "...more \n\n \n "))[1]
print(i/length(clean_df$review))
}
}
View(clean_df)
save.image("In_Progress.RData")
remove(total.df, raw_html)
cat("English check starts\n")
clean_df$language <- as.factor(textcat(clean_df$review))
library(textcat)      # For automatic language recognition (extract English reviews)
clean_df$language <- as.factor(textcat(clean_df$review))
View(clean_df)
save.image("In_Progress.RData")
final.output.filename <- "Full_Reviews_Fantasy_1250_titles.RData"
nonenglish_reviews <- which(clean_df$language != "english")
clean_df <- clean_df[-nonenglish_reviews, ]
cat("NA language check starts\n")
nonenglish_reviews <- which(is.na(clean_df$language))
clean_df <- clean_df[-nonenglish_reviews, ]
cat("NA language check OK\n")
cat("\nFinal saving\n")
save(clean_df, error_log, iter, file = final.output.filename) #final saving
sink("Exit.html")
load("/home/rsimone/Desktop/Goodreads_corpora/FantasyFULL/ProvisionalCorpus.RData")
cat(total.df$full_html[1])
sink()
total.df$review[1]
clean_df_tmp <- clean_df
load("/home/rsimone/ownCloud/Archive/Goodreads_corpora/RomanceFULL/Full_Reviews_Romance_1250_titles.RData")
clean_df_tmp <- rbind(clean_df_tmp, clean_df)
load("/home/rsimone/ownCloud/Archive/Goodreads_corpora/ThrillerFULL/Full_Reviews_Thriller_1250_titles.RData")
clean_df_tmp <- rbind(clean_df_tmp, clean_df)
clean_df_tmp <- unique(clean_df_tmp)
View(clean_df_tmp)
load("/home/rsimone/ownCloud/Archive/Goodreads_corpora/FantasyFULL/Full_Reviews_Fantasy_1250_titles.RData")
clean_df_tmp <- clean_df
load("/home/rsimone/ownCloud/Archive/Goodreads_corpora/RomanceFULL/Full_Reviews_Romance_1250_titles.RData")
clean_df_tmp <- rbind(clean_df_tmp, clean_df)
load("/home/rsimone/ownCloud/Archive/Goodreads_corpora/ThrillerFULL/Full_Reviews_Thriller_1250_titles.RData")
clean_df_tmp <- rbind(clean_df_tmp, clean_df)
clean_df_tmp <- unique(clean_df_tmp)
setwd("~")
clean_df <- clean_df_tmp
remove(clean_df_tmp)
sink("Test_W2V.txt")
for(i in 1:1000){
cat(clean_df$review, "\n##############NEW_REVIEW############\n")
}
sink()
sink("Test_W2V.txt")
for(i in 1:1000){
cat(clean_df$review[i], "\n##############NEW_REVIEW############\n")
}
sink()
sink("Goodreads_W2V.txt")
for(i in 1:length(clean_df$review)){
cat(clean_df$review[i], "\n##############NEW_REVIEW############\n")
}
load("/home/rsimone/Kolimo_experiment/Kolimo_corpus.RData")
###prepare corpus without Kafka
Kafka_gnd <- "http://d-nb.info/gnd/118559230"
###select only texts published in range (first_work/last_work)
###Young
other_authors_metadata <- full_metadata_withDates[-which(full_metadata_withDates$gnd_id==Kafka_gnd),]
other_authors_subcorp <- Kolimo_texts[-which(full_metadata_withDates$gnd_id==Kafka_gnd)]
range_dates <- c(1907, 1926)
works_in_range <- which(is.between(other_authors_metadata$date, range_dates))
other_authors_metadata <- other_authors_metadata[works_in_range,]
other_authors_subcorp <- other_authors_subcorp[works_in_range]
is.between <- function(x, range=c(a, b)) {
x > range[1] & x < range[2]
}
works_in_range <- which(is.between(other_authors_metadata$date, range_dates))
other_authors_metadata <- other_authors_metadata[works_in_range,]
other_authors_subcorp <- other_authors_subcorp[works_in_range]
full_metadata_withDates <- other_authors_metadata
Kolimo_texts <- other_authors_subcorp
save(Kolimo_texts, full_metadata_withDates, file = "Other_authors_corpus.RData")
download.file("https://owncloud.gwdg.de/index.php/s/CHFXj5lynCEbIrr")
download.file("https://owncloud.gwdg.de/index.php/s/CHFXj5lynCEbIrr", destfile = "Other_authors_corpus.RData")
download.file("https://owncloud.gwdg.de/index.php/s/CHFXj5lynCEbIrr/download", destfile = "Other_authors_corpus.RData")
download.file("https://owncloud.gwdg.de/index.php/s/sO6r58SHKL6CZTg/download", destfile = "Other_authors_corpus.RData")
setwd("/home/rsimone/book_FSE/Training_material")
options("encoding" = "UTF-8")
x <- " ~!\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}¡¢£§©«®°¶»¿ÀÁÂÃÄÆÇÈÉÊËÌÍÎÏÒÓÔÕÖÙÚÛÜßàáâãäæçèéêëìíîïòóôõö÷ùúûüÿŒœŸ†‡•‣‹›€∙▪▫◦"
charset <- substring(x, seq(1,nchar(x),1), seq(1,nchar(x),1))
gt_files <- list.files(pattern = "*.txt")
gt_ids <- unlist(strsplit(gt_files, ".txt"))
gt_ids
for(i in 1:length(gt_files)){
lines_tmp <- readLines(gt_files[i])
for(n in 1:length(lines_tmp)){
stringset <- substring(lines_tmp[n], seq(1,nchar(lines_tmp[n]),1), seq(1,nchar(lines_tmp[n]),1))
if(length(stringset[which(!stringset %in% charset)])>0){
cat("###########Attention!!!!\nError in file #", i, "\n")
print(stringset[which(!stringset %in% charset)])
}
cat(lines_tmp[n], file = paste("ground_truth/", gt_ids[i], sprintf("%04d", n), ".gt.txt", sep = ""))
}
}
library(stylo)
setwd("/home/rsimone/book_FSE/Stylometry_test")
load("Corpus.RData")
filenames <- list.files(path = ".", pattern="*.txt", full.names=F)
ldf <- lapply(filenames, function(x){readLines(x, encoding = "UTF-8")})
full_transcripts <- unlist(lapply(ldf, function(x){paste(x, collapse = "#NEWLINE#")}))
for(i in 1:length(full_transcripts)){
full_transcripts[i] <- gsub("ä", "ae", full_transcripts[i])
full_transcripts[i] <- gsub("ö", "oe", full_transcripts[i])
full_transcripts[i] <- gsub("ü", "ue", full_transcripts[i])
full_transcripts[i] <- gsub("ß", "ss", full_transcripts[i])
full_transcripts[i] <- gsub("([a-z])-#NEWLINE#([a-z])", "\\1\\2", full_transcripts[i])
full_transcripts[i] <- gsub("#NEWLINE#", " ", full_transcripts[i])
}
TestSetNEW <- list()
for(i in 1:length(full_transcripts)){
TestSetNEW[[i]] <- txt.to.words(full_transcripts[i])
}
selection <- c(1:35,38)
selection
n <- 1
n <- 0
selection <- c(3:8,10:12,14:17,19:21,25,28:38)
selection
length(selection)
n <- 0
for(i in selection){
if(i %in% c(36,37))
next
n <- n+1
TestSet[[i]] <- TestSetNEW[[n]]
}
lapply(TestSet, length)
unlist(lapply(TestSet, length))
unlist(lapply(TestSet, length)) == unlist(lapply(TestSetNEW, length))
unlist(lapply(TestSetNEW, length))
library(stylo)
setwd("/home/rsimone/book_FSE/Stylometry_test")
load("Corpus.RData")
filenames <- list.files(path = ".", pattern="*.txt", full.names=F)
ldf <- lapply(filenames, function(x){readLines(x, encoding = "UTF-8")})
full_transcripts <- unlist(lapply(ldf, function(x){paste(x, collapse = "#NEWLINE#")}))
for(i in 1:length(full_transcripts)){
full_transcripts[i] <- gsub("ä", "ae", full_transcripts[i])
full_transcripts[i] <- gsub("ö", "oe", full_transcripts[i])
full_transcripts[i] <- gsub("ü", "ue", full_transcripts[i])
full_transcripts[i] <- gsub("ß", "ss", full_transcripts[i])
full_transcripts[i] <- gsub("([a-z])-#NEWLINE#([a-z])", "\\1\\2", full_transcripts[i])
full_transcripts[i] <- gsub("#NEWLINE#", " ", full_transcripts[i])
}
TestSetNEW <- list()
for(i in 1:length(full_transcripts)){
TestSetNEW[[i]] <- txt.to.words(full_transcripts[i])
}
selection <- c(3:8,10:12,14:17,19:21,25,28:38)
length(selection)
n <- 0
for(i in selection){
if(i %in% c(36,37))
next
n <- n+1
TestSet[[n]] <- TestSetNEW[[i]]
}
library(stylo)
setwd("/home/rsimone/book_FSE/Stylometry_test")
load("Corpus.RData")
filenames <- list.files(path = ".", pattern="*.txt", full.names=F)
ldf <- lapply(filenames, function(x){readLines(x, encoding = "UTF-8")})
full_transcripts <- unlist(lapply(ldf, function(x){paste(x, collapse = "#NEWLINE#")}))
for(i in 1:length(full_transcripts)){
full_transcripts[i] <- gsub("ä", "ae", full_transcripts[i])
full_transcripts[i] <- gsub("ö", "oe", full_transcripts[i])
full_transcripts[i] <- gsub("ü", "ue", full_transcripts[i])
full_transcripts[i] <- gsub("ß", "ss", full_transcripts[i])
full_transcripts[i] <- gsub("([a-z])-#NEWLINE#([a-z])", "\\1\\2", full_transcripts[i])
full_transcripts[i] <- gsub("#NEWLINE#", " ", full_transcripts[i])
}
TestSetNEW <- list()
for(i in 1:length(full_transcripts)){
TestSetNEW[[i]] <- txt.to.words(full_transcripts[i])
}
selection <- c(3:8,10:12,14:17,19:21,25,28:38)
length(selection)
n <- 0
for(i in selection){
n <- n+1
if(i %in% c(36,37))
next
if(i == 38){
TestSet[[n]] <- TestSetNEW[[36]]
next
}
TestSet[[n]] <- TestSetNEW[[i]]
}
unlist(lapply(TestSet, length))
unlist(lapply(TestSetNEW, length))
library(stylo)
setwd("/home/rsimone/book_FSE/Stylometry_test")
load("Corpus.RData")
filenames <- list.files(path = ".", pattern="*.txt", full.names=F)
ldf <- lapply(filenames, function(x){readLines(x, encoding = "UTF-8")})
full_transcripts <- unlist(lapply(ldf, function(x){paste(x, collapse = "#NEWLINE#")}))
for(i in 1:length(full_transcripts)){
full_transcripts[i] <- gsub("ä", "ae", full_transcripts[i])
full_transcripts[i] <- gsub("ö", "oe", full_transcripts[i])
full_transcripts[i] <- gsub("ü", "ue", full_transcripts[i])
full_transcripts[i] <- gsub("ß", "ss", full_transcripts[i])
full_transcripts[i] <- gsub("([a-z])-#NEWLINE#([a-z])", "\\1\\2", full_transcripts[i])
full_transcripts[i] <- gsub("#NEWLINE#", " ", full_transcripts[i])
}
TestSetNEW <- list()
for(i in 1:length(full_transcripts)){
TestSetNEW[[i]] <- txt.to.words(full_transcripts[i])
}
unlist(lapply(TestSet, length))
selection <- c(3:8,10:12,14:17,19:21,25,28:38)
length(selection)
n <- 0
for(i in selection){
n <- n+1
if(i %in% c(36,37))
next
if(i == 38){
TestSet[[n]] <- TestSetNEW[[36]]
next
}
TestSet[[n]] <- TestSetNEW[[i]]
}
unlist(lapply(TestSet, length))
unlist(lapply(TestSetNEW, length))
remove(TestSetNEW, full_transcripts, filenames, ldf, i, n, selection)
save.image("CorpusNEW.RData")
selection <-
setwd("/home/rsimone/book_FSE/Training_material/ground_truth")
selection <-
setwd("/home/rsimone/book_FSE/Training_material/ground_truth")
selection <- c()
setwd("/home/rsimone/book_FSE/Training_material/ground_truth")
filenames <- list.files("/home/rsimone/book_FSE/Training_material/ground_truth", pattern="*.txt", full.names=FALSE)
imagenames <- list.files("/home/rsimone/book_FSE/Training_material/ground_truth", pattern="*.png", full.names=FALSE)
output_folder <- "/home/rsimone/book_FSE/Training_material/ground_truth_clean/"
file_ids <- unlist(strsplit(filenames, ".txt"))
file_ids
file_ids <- unlist(strsplit(filenames, "gt.txt"))
file_ids
file_ids <- unlist(strsplit(filenames, ".gt.txt"))
file_ids
paste(15, sprintf("%04d", 127), sep="")
paste(15, sprintf("%04d", 127:133), sep="")
selection <- list(
15 = 127
)
selection <- c(
paste(5, sprintf("%04d", 207), sep="")
paste(6, sprintf("%04d", 6), sep="")
paste(11, sprintf("%04d", 141), sep="")
paste(12, sprintf("%04d", c(109,165,166,181)), sep="")
paste(15, sprintf("%04d", 127), sep="")
paste(16, sprintf("%04d", c(6,44,50,57,58,91)), sep="")
paste(17, sprintf("%04d", c(16,37,40,75,98)), sep="")
paste(19, sprintf("%04d", 86:141), sep="")
paste(20, sprintf("%04d", 164), sep="")
paste(21, sprintf("%04d", 100:102), sep="")
paste(33, sprintf("%04d", c(2,58)), sep="")
)
selection <- c(
paste(5, sprintf("%04d", 207), sep=""),
paste(6, sprintf("%04d", 6), sep=""),
paste(11, sprintf("%04d", 141), sep=""),
paste(12, sprintf("%04d", c(109,165,166,181)), sep=""),
paste(15, sprintf("%04d", 127), sep=""),
paste(16, sprintf("%04d", c(6,44,50,57,58,91)), sep=""),
paste(17, sprintf("%04d", c(16,37,40,75,98)), sep=""),
paste(19, sprintf("%04d", 86:141), sep=""),
paste(20, sprintf("%04d", 164), sep=""),
paste(21, sprintf("%04d", 100:102), sep=""),
paste(33, sprintf("%04d", c(2,58)), sep="")
)
selection
selection <- c(
paste(05, sprintf("%04d", 207), sep=""),
paste(06, sprintf("%04d", 6), sep=""),
paste(11, sprintf("%04d", 141), sep=""),
paste(12, sprintf("%04d", c(109,165,166,181)), sep=""),
paste(15, sprintf("%04d", 127), sep=""),
paste(16, sprintf("%04d", c(6,44,50,57,58,91)), sep=""),
paste(17, sprintf("%04d", c(16,37,40,75,98)), sep=""),
paste(19, sprintf("%04d", 86:141), sep=""),
paste(20, sprintf("%04d", 164), sep=""),
paste(21, sprintf("%04d", 100:102), sep=""),
paste(33, sprintf("%04d", c(2,58)), sep="")
)
selection
selection <- c(
paste("05", sprintf("%04d", 207), sep=""),
paste("06", sprintf("%04d", 6), sep=""),
paste(11, sprintf("%04d", 141), sep=""),
paste(12, sprintf("%04d", c(109,165,166,181)), sep=""),
paste(15, sprintf("%04d", 127), sep=""),
paste(16, sprintf("%04d", c(6,44,50,57,58,91)), sep=""),
paste(17, sprintf("%04d", c(16,37,40,75,98)), sep=""),
paste(19, sprintf("%04d", 86:141), sep=""),
paste(20, sprintf("%04d", 164), sep=""),
paste(21, sprintf("%04d", 100:102), sep=""),
paste(33, sprintf("%04d", c(2,58)), sep="")
)
selection
file_ids
###get rid of dirty lines
###to solve issue with Ocropus-rtrain
##selection of lines to exclude (in the format PPLLLL)
selection <- c(
paste("05", sprintf("%04d", 207), sep=""),
paste("06", sprintf("%04d", 6), sep=""),
paste(11, sprintf("%04d", 141), sep=""),
paste(12, sprintf("%04d", c(109,165,166,181)), sep=""),
paste(15, sprintf("%04d", 127), sep=""),
paste(16, sprintf("%04d", c(6,44,50,57,58,91)), sep=""),
paste(17, sprintf("%04d", c(16,37,40,75,98)), sep=""),
paste(19, sprintf("%04d", 86:141), sep=""),
paste(20, sprintf("%04d", 164), sep=""),
paste(21, sprintf("%04d", 100:102), sep=""),
paste(33, sprintf("%04d", c(2,58)), sep="")
)
setwd("/home/rsimone/book_FSE/Training_material/ground_truth")
filenames <- list.files("/home/rsimone/book_FSE/Training_material/ground_truth", pattern="*.txt", full.names=FALSE)
imagenames <- list.files("/home/rsimone/book_FSE/Training_material/ground_truth", pattern="*.png", full.names=FALSE)
output_folder <- "/home/rsimone/book_FSE/Training_material/ground_truth_clean/"
file_ids <- unlist(strsplit(filenames, ".gt.txt"))
for(i in 1:length(filenames)){
line_tmp <- readLines(filenames[i])
if(!file_ids[i] %in% selection){
cat(line_tmp, file = paste(output_folder, filenames[i], sep = ""))
file.copy(imagenames[i], paste(output_folder, imagenames[i], sep = ""))
}
else
cat("line excluded:", file_ids[i], "\n")
#print(i)
}
print(selection)
n <- 0
for(i in 1:length(filenames)){
line_tmp <- readLines(filenames[i])
if(!file_ids[i] %in% selection){
# cat(line_tmp, file = paste(output_folder, filenames[i], sep = ""))
# file.copy(imagenames[i], paste(output_folder, imagenames[i], sep = ""))
}
else{
n <- n+1
print(selection[n])
cat("line excluded:", file_ids[i], "\n")
}
}
###get rid of dirty lines
###to solve issue with Ocropus-rtrain
##selection of lines to exclude (in the format PPLLLL)
selection <- c(
paste("05", sprintf("%04d", 207), sep=""),
paste("06", sprintf("%04d", 6), sep=""),
paste(11, sprintf("%04d", 141), sep=""),
paste(12, sprintf("%04d", c(109,165,166,181)), sep=""),
paste(15, sprintf("%04d", 127), sep=""),
paste(16, sprintf("%04d", c(6,44,50,57,58,91)), sep=""),
paste(17, sprintf("%04d", c(16,37,40,75,98)), sep=""),
paste(19, sprintf("%04d", 86:141), sep=""),
paste(21, sprintf("%04d", 100:102), sep=""),
paste(29, sprintf("%04d", 164), sep=""),
paste(33, sprintf("%04d", c(2,58)), sep="")
)
setwd("/home/rsimone/book_FSE/Training_material/ground_truth")
filenames <- list.files("/home/rsimone/book_FSE/Training_material/ground_truth", pattern="*.txt", full.names=FALSE)
imagenames <- list.files("/home/rsimone/book_FSE/Training_material/ground_truth", pattern="*.png", full.names=FALSE)
output_folder <- "/home/rsimone/book_FSE/Training_material/ground_truth_clean/"
file_ids <- unlist(strsplit(filenames, ".gt.txt"))
n <- 0
for(i in 1:length(filenames)){
line_tmp <- readLines(filenames[i])
if(!file_ids[i] %in% selection){
cat(line_tmp, file = paste(output_folder, filenames[i], sep = ""))
file.copy(imagenames[i], paste(output_folder, imagenames[i], sep = ""))
}
else{
n <- n+1
print(selection[n])
cat("line excluded:", file_ids[i], "\n")
}
}
load("/home/rsimone/Provisional_data.RData")
print("All done. Starting Cleaning")
for(i in 1:length(user_location)){
print(i)
if(is.na(user_location[i]))
next
user_location[i] <- unlist(strsplit(user_location[i], "\n"))[2]
for(n in 1:nchar(user_location[i])){
if(substr(user_location[i], 1, 1)==" ")
user_location[i] <- substr(user_location[i], 2, nchar(user_location[i]))
else
break
}
}
for(i in 1:length(user_date)){
print(i)
if(is.na(user_date[i]))
next
user_date[i] <- unlist(strsplit(user_date[i], "Joined"))[2]
user_date[i] <- unlist(strsplit(user_date[i], "\n"))[1]
}
user_data <- data.frame(user=all_users[1:length(user_location)], location=user_location, date=user_date, stringsAsFactors = F)
user_data <- data.frame(user=all_users[1:length(user_date)], location=user_location, date=user_date, stringsAsFactors = F)
user_data <- data.frame(user=all_users[1:length(user_location)], location=user_location, date=user_date[1:length(user_location)], stringsAsFactors = F)
View(user_data)
head(sort(table(user_data$location), decreasing = T))
location_stats <- sort(table(user_data$location), decreasing = T)
for(i in location_stats){
cat(i)
}
for(i in 1:200){
cat(names(i))
}
for(i in location_stats){
cat(names(i))
}
dimnames(location_stats)
for(i in location_stats){
cat(dimnames(i), "\t\t", i, "\n")
}
sink("Full_location_stats.txt")
for(i in location_stats){
cat(dimnames(i), "\t\t", i, "\n")
}
sink()
dimnames(location_stats[1])
location_stats[1]
cat(location_stats[1])
cat(names(location_stats[1]))
sink("Full_location_stats.txt")
for(i in location_stats){
cat(names(i), "\t\t", i, "\n")
}
sink()
setwd("~")
sink("Full_location_stats.txt")
for(i in 1:1000){
cat(names(location_stats[i]), "\t\t", location_stats[i], "\n")
}
sink()
write.csv(location_stats, file = "stats.csv")
length(which(is.na(user_data$location)))
length(which(is.na(user_data$location)))/length(user_data$location)
length(user_data$location)
write.csv(user_data, file = "Full_location_stats.csv")
save(user_data, file="Location_data.RData")
11000/12
10600/12
3*400000/3600
3*400000/3600/24
load("/home/rsimone/ownCloud/Wattpad_corpus/Location_data.RData")
View(user_data)
setwd("/home/rsimone/book_FSE/Training_material/TestSet_ART")
filenames <- list.files("/home/rsimone/book_FSE/Training_material/TestSet_ART", pattern="*.txt", full.names=FALSE)
imagenames <- list.files("/home/rsimone/book_FSE/Training_material/TestSet_ART", pattern="*.png", full.names=FALSE)
output_folder <- "/home/rsimone/book_FSE/Training_material/TestSet_Transkribus/"
file_ids <- unlist(strsplit(filenames, ".gt.txt"))
for(i in 1:length(filenames)){
file.copy(filenames[i], paste(output_folder, "txt/", file_ids[i], sep = ""))
file.copy(imagenames[i], paste(output_folder, imagenames[i], sep = ""))
}
for(i in 1:length(filenames)){
file.copy(filenames[i], paste(output_folder, "txt/", file_ids[i], ".txt", sep = ""))
file.copy(imagenames[i], paste(output_folder, imagenames[i], sep = ""))
}
setwd("/home/rsimone/book_FSE/Training_material/TrainingSet_ART")
filenames <- list.files("/home/rsimone/book_FSE/Training_material/TrainingSet_ART", pattern="*.txt", full.names=FALSE)
imagenames <- list.files("/home/rsimone/book_FSE/Training_material/TrainingSet_ART", pattern="*.png", full.names=FALSE)
output_folder <- "/home/rsimone/book_FSE/Training_material/TrainingSet_Transkribus/"
file_ids <- unlist(strsplit(filenames, ".gt.txt"))
for(i in 1:length(filenames)){
file.copy(filenames[i], paste(output_folder, "txt/", file_ids[i], ".txt", sep = ""))
file.copy(imagenames[i], paste(output_folder, imagenames[i], sep = ""))
}
